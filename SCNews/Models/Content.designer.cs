#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SCNews.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="C300335_starcraftmd_dev")]
	public partial class ContentDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertContent(Content instance);
    partial void UpdateContent(Content instance);
    partial void DeleteContent(Content instance);
    partial void InsertContentType(ContentType instance);
    partial void UpdateContentType(ContentType instance);
    partial void DeleteContentType(ContentType instance);
    #endregion
		
		public ContentDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["C300335_starcraftmd_devConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ContentDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ContentDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ContentDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ContentDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Content> Contents
		{
			get
			{
				return this.GetTable<Content>();
			}
		}
		
		public System.Data.Linq.Table<ContentType> ContentTypes
		{
			get
			{
				return this.GetTable<ContentType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="C300335_starcraftmd.Content")]
	public partial class Content : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _type_id;
		
		private string _text;
		
		private EntityRef<ContentType> _ContentType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ontype_idChanging(int value);
    partial void Ontype_idChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    #endregion
		
		public Content()
		{
			this._ContentType = default(EntityRef<ContentType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int type_id
		{
			get
			{
				return this._type_id;
			}
			set
			{
				if ((this._type_id != value))
				{
					if (this._ContentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Ontype_idChanging(value);
					this.SendPropertyChanging();
					this._type_id = value;
					this.SendPropertyChanged("type_id");
					this.Ontype_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContentType_Content", Storage="_ContentType", ThisKey="type_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ContentType ContentType
		{
			get
			{
				return this._ContentType.Entity;
			}
			set
			{
				ContentType previousValue = this._ContentType.Entity;
				if (((previousValue != value) 
							|| (this._ContentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContentType.Entity = null;
						previousValue.Content = null;
					}
					this._ContentType.Entity = value;
					if ((value != null))
					{
						value.Content = this;
						this._type_id = value.id;
					}
					else
					{
						this._type_id = default(int);
					}
					this.SendPropertyChanged("ContentType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="C300335_starcraftmd.ContentType")]
	public partial class ContentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntityRef<Content> _Content;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public ContentType()
		{
			this._Content = default(EntityRef<Content>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContentType_Content", Storage="_Content", ThisKey="id", OtherKey="type_id", IsUnique=true, IsForeignKey=false)]
		public Content Content
		{
			get
			{
				return this._Content.Entity;
			}
			set
			{
				Content previousValue = this._Content.Entity;
				if (((previousValue != value) 
							|| (this._Content.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Content.Entity = null;
						previousValue.ContentType = null;
					}
					this._Content.Entity = value;
					if ((value != null))
					{
						value.ContentType = this;
					}
					this.SendPropertyChanged("Content");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
